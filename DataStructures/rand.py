
Artificial Intelligence

Context

Create a Python project of a Magic 8 Ball which is a toy used for fortune-telling or seeking advice.

Task

Create a Python project of a Magic 8 Ball which is a toy used for fortune-telling or seeking advice.

Allow the user to input their question.

Show an in progress message.

Create 10/20 responses, and show a random response.

Allow the user to ask another question/advice or quit the game.

TDD

Include tests for this program.


Question 2:

Additive Sequence

Context

Write a Python program to find whether a string contains an additive sequence or not.

Task

Write a Python program to find whether a string contains an additive sequence or not.


The additive sequence is a sequence of numbers where the sum of the first two numbers is equal to the third one.

Sample additive sequence: 6, 6, 12, 18, 30

In the above sequence 6 + 6 =12, 6 + 12 = 18, 12 + 18 = 30....

Also, you can split a number into one or more digits to create an additive sequence.

TDD

Include unit tests for this solution.


Question 3:

Simple Pig Latin Converter

Context

Pig latin is a language game where English words are altered by moving some letters to the end of the word and/or by adding a suffix.

Task

Write a program that will take a word and output the pig latin version of the word by following the following rules:


1. If the word starts with a consonant or group of consonants, move all letters before the first vowel to the end of the word then add "ay".

Example:

will -> illway

dog -> ogday

category -> ategorycay

chatter -> atterchay

trash -> ashtray


2. If the word starts with a vowel, simply add "way" to the end of the word.

Example:

andela - andelaway

electrician - electricianway

TDD

Include unit tests for this solution.



Question 4:


Even Fibonacci numbers

Context

Each new term in the Fibonacci sequence is generated by adding the previous two terms.

Task

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

TDD

Include tests



Question 5:


Question Marks

Context

Take an input string parameter and determine if exactly 3 question marks exist between every pair of numbers that add up to 10.

Task

Take an input string parameter and determine if exactly 3 question marks exist between every pair of numbers that add up to 10. If so, return true, otherwise return false. Some examples test cases are below:

Input:"aa6?9"

Output:"false"

Input:"acc?7??sss?3rr1??????5"

Output:"true"

TDD

Include tests

Test.assertEquals(numberOfRoutes(1, 1), 2);
Test.assertEquals(numberOfRoutes(5, 1), 6);
Test.assertEquals(numberOfRoutes(3, 4), 35);
You have a grid with m rows and n columns.
Return number of ways that you can start from point A to reach point B.
you are only allowed to move right and up.

alt text

In the picture, there are 10 pathes from A to B.


Complete the method so that it does the following:
Removes any duplicate query string parameters from the url
Removes any query string parameters specified within the 2nd argument (optional array)
Examples:
stripUrlParams('www.codewars.com?a=1&b=2&a=2') // returns 'www.codewars.com?a=1&b=2'
stripUrlParams('www.codewars.com?a=1&b=2&a=2', ['b']) // returns 'www.codewars.com?a=1'
stripUrlParams('www.codewars.com', ['b']) // returns 'www.codewars.com'

* Finding the first non-repeating character
if all characters are repeating return an empty string e.g ""





John keeps a backup of his old personal phone book as a text file. On each line of the file he can find the phone number (formated as +X-abc-def-ghij where X stands for one or two digits), the corresponding name between < and > and the address.

Unfortunately everything is mixed, things are not always in the same order, lines are cluttered with non-alpha-numeric characters.

Examples of John's phone book lines:

"/+1-541-754-3010 156 Alphand_St. <J Steeve>\n"

" 133, Green, Rd. <E Kustur> NY-56423 ;+1-541-914-3010!\n"

"<Anastasia> +48-421-674-8974 Via Quirinal Roma\n"

Could you help John with a program that, given the lines of his phone book and a phone number returns a string for this number : "Phone => num, Name => name, Address => adress"

Examples:

s = "/+1-541-754-3010 156 Alphand_St. <J Steeve>\n 133, Green, Rd. <E Kustur> NY-56423 ;+1-541-914-3010!\n"

phone(s, "1-541-754-3010") should return "Phone => 1-541-754-3010, Name => J Steeve, Address => 156 Alphand St."
It can happen that, for a few phone numbers, there are many people for a phone number -say nb- , then

return : "Error => Too many people: nb"

or it can happen that the number nb is not in the phone book, in that case

return: "Error => Not found: nb"

You can see other examples in the test cases.

JavaScript random tests completed by @matt c

Note
Codewars stdout doesn't print part of a string when between < and >

FUNDAMENTALSSTRINGS


def phone(strng, num):
    # your code




dr = ("/+1-541-754-3010 156 Alphand_St. <J Steeve>\n 133, Green, Rd. <E Kustur> NY-56423 ;+1-541-914-3010;\n"
"+1-541-984-3012 <P Reed> /PO Box 530; Pollocksville, NC-28573\n :+1-321-512-2222 <Paul Dive> Sequoia Alley PQ-67209\n"
"+1-741-984-3090 <Peter Reedgrave> _Chicago\n :+1-921-333-2222 <Anna Stevens> Haramburu_Street AA-67209\n"
"+1-111-544-8973 <Peter Pan> LA\n +1-921-512-2222 <Wilfrid Stevens> Wild Street AA-67209\n"
"<Peter Gone> LA ?+1-121-544-8974 \n <R Steell> Quora Street AB-47209 +1-481-512-2222!\n"
"<Arthur Clarke> San Antonio $+1-121-504-8974 TT-45120\n <Ray Chandler> Teliman Pk. !+1-681-512-2222! AB-47209,\n"
"<Sophia Loren> +1-421-674-8974 Bern TP-46017\n <Peter O'Brien> High Street +1-908-512-2222; CC-47209\n"
"<Anastasia> +48-421-674-8974 Via Quirinal Roma\n <P Salinger> Main Street, +1-098-512-2222, Denver\n"
"<C Powel> *+19-421-674-8974 Chateau des Fosses Strasbourg F-68000\n <Bernard Deltheil> +1-498-512-2222; Mount Av.  Eldorado\n"
"+1-099-500-8000 <Peter Crush> Labrador Bd.\n +1-931-512-4855 <William Saurin> Bison Street CQ-23071\n"
"<P Salinge> Main Street, +1-098-512-2222, Denve\n")

def testing(actual, expected):
    Test.assert_equals(actual, expected)

Test.describe("phone")
Test.it("Basic tests")
testing(phone(dr, "48-421-674-8974"), "Phone => 48-421-674-8974, Name => Anastasia, Address => Via Quirinal Roma")
testing(phone(dr, "1-921-512-2222"), "Phone => 1-921-512-2222, Name => Wilfrid Stevens, Address => Wild Street AA-67209")
testing(phone(dr, "1-908-512-2222"), "Phone => 1-908-512-2222, Name => Peter O'Brien, Address => High Street CC-47209")
testing(phone(dr, "1-541-754-3010"), "Phone => 1-541-754-3010, Name => J Steeve, Address => 156 Alphand St.")
testing(phone(dr, "1-121-504-8974"), "Phone => 1-121-504-8974, Name => Arthur Clarke, Address => San Antonio TT-45120")
testing(phone(dr, "1-498-512-2222"), "Phone => 1-498-512-2222, Name => Bernard Deltheil, Address => Mount Av. Eldorado")
testing(phone(dr, "1-098-512-2222"), "Error => Too many people: 1-098-512-2222")
testing(phone(dr, "5-555-555-5555"), "Error => Not found: 5-555-555-5555")




def code(s):
    # your code

def decode(s):
    # your code




A squared string has n lines, each substring being n characters long: For example:

s = "abcd\nefgh\nijkl\nmnop" is a squared string of size 4.

We will use squared strings to code and decode texts. To make things easier we suppose that our original text doesn't include the character '\n'.

#Coding Input:

a text t of length l.
Consider the smallest integer n such that n * n be greater or equal to l.
Complete t with the char of ascii code 11 (we suppose that this char is not in our original text) until the length of t is n * n.
From now on we can transform the new t in a squared string s of size n by inserting '\n' where needed.
Apply a clockwise rotation of 90 degrees to s: that's it for the coding part.
#Decoding Input:

a squared string s resulting from the coding
Apply a counter-clockwise rotation of 90 degrees to s
Do some cleaning to have the original text t
You can see clockwise rotation of 90 degrees: http://www.codewars.com/kata/56dbeec613c2f63be4000be6 You can see counter-clockwise rotation of 90 degrees: http://www.codewars.com/kata/56dbf59b0a10feb08c000227

Example:

t = "I.was.going.fishing.that.morning.at.ten.o'clock"

code(t) -> "c.nhsoI\nltiahi.\noentinw\ncng.nga\nk..mg.s\n\voao.f.\n\v'trtig"

decode(code(t)) == "I.was.going.fishing.that.morning.at.ten.o'clock"

(Dots indicate spaces since they are quite invisible).

Notes:
Swift : character 11 is replaced by "\u{F7}" (ie "รท" - alt 246 -)
Ocaml : character 11 is replaced by '&'
Fortran: Your returned string for both functions are not permitted to contain redundant leading/trailing whitespace. In return, you may safely assume that all input strings passed into your function(s) will not contain redundant leading/trailing whitespace, i.e. you do not and should not trim the input string before operating on it
Don't use this coding to keep your secrets:-)


def testing(actual, expected):
    Test.assert_equals(actual, expected)

data1 =  ("What do you remember? When I looked at his streaky glasses, I wanted "
         "to leave him. And before that? He stole those cherries for me at midnight. We were walking "
         "in the rain and I loved him. And before that? I saw him coming "
         "toward me that time at the picnic, edgy, foreign.")

data2 = ("Some say the world will end in fire, Some say in ice. From what I've tasted of desire "
         "I hold with those who favor fire. But if it had to perish twice, I think I know enough of hate"
         " To say that for destruction ice Is also great And would suffice.")

data1Sol = ("\x0bctg?.nadr d gdbW\n\x0b,i    lnis tl eh\n\x0b mtIAakietboaara\n\x0beeo nnigsoe st?t\n"
"\x0bd wsddnh lfls   \n\x0bgaaa  gtfeoeehWd\n"
"\x0bytrwbI .o rasiho\n\x0b, d e i rtev,se \n\x0b t hflnW h e  ny\n\x0bfhmioo emot Is o\n\x0boeemrvt eshh tIu\n\x0br   eehw eaiwr  \n"
"\x0beptc deea tmaelr\n\x0biihot  rtc?.naoe\n\x0bgcamhhre h  tkom\n\x0bnntiaia meHAeyke\n\x0b.i ntmiwirend em")

data2Sol = ("fa  h ttrheI ilS\nitifakw   s'irdo\nc cotnihftivce m\neAereocaihree,we\n.n   wedroe . i \n\x0bdIdT , es t Sls\n"
"\x0b seoe t.eIaFola\n"
"\x0bw s nIo   srm y\n\x0boatso  Bwhtoee \n\x0bulrautpuhoem nt\n\x0blsuyghetold sdh\n\x0bdoc hir  d wa e\n\x0b  tt niif ohyi \n"
"\x0bsgihoksfawfa nw\n\x0buroaf h vi ti o\n\x0bfent I iotd nfr")

Test.describe("code decode")
Test.it("Basic tests")
testing(code(data1), data1Sol)
testing(code(data2), data2Sol)
testing(code(""), "")
testing(decode(""), "")
testing(decode(data1Sol), data1)